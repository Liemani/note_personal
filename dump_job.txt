etc_job.txt

server
graphic
ar
ai
embedded
firmware

apple developer academy {
link :
  https://developeracademy.postech.ac.kr/apply

지원서 :

본인의 강점, 아카데미 지원 동기 등 Life journey에서 가장 강조하고 싶은 내용을 간략하게 적어 주세요. (공백 포함 최대 200단어) {
  저는 애플 좋아
  objective-c
  swift 등 독학
  제대로 배우고 싶다
  메탈도 배우고 싶다
  vision os 앱 개발도 배울 수 있으면 좋겠다
  해내는 방법을 안다
  하나만 집중한다
  게임이던지 학습이던지 빠지면 하루 10시간씩 주말 없이 몰입할 수 있다
  그런 사람들이 모여 있는 환경에서 생활하고 싶다
  이제껏 그런 사람을 만날 기회가 없었다

  저는 하고 싶은 일이 있다면 주말까지 평균 10시간 몰입해서 그 일을 할 수 있습니다.
  하지만 지금까지 함께 같은 목표를 가지고 이 정도의 시간을 보낼 동료와 만나지 못했습니다.
  애플 디벨로퍼 아카데미에서 진행하는 프로젝트는
  다른 일 없이 공동의 목표에 몰입할 동료를 만날 수 있으면 좋겠습니다.

  앱 개발 관심 만들고 싶은 것이 많다.
}

Core Competencies :
저는 좋아하는 일을 할 때는 그 일에 하루 10 시간 이상 투자할 수 있습니다. 제 꿈의 프로그램을 만들기 위한 중간 단계로, Apple Developer Academy에서 함께 프로젝트에 몰입할 수 있는 동료를 만날 수 있으면 좋겠습니다.

지금까지 살아오면서
  현재의 여러분을 만든
    인생의 중요한 깨달음
  혹은
    영향을 주었던 경험
등
  내 인생의 변곡점에
대해 아래 가이드 문서를 참고하여 자유롭게 표현해주세요. (분량: 최대 10장) {
  파일 제목 : 박정훈_Life Journey 테크_931116

Part 1. Cover Page
Part 2. Connecting the Dots
}

본인의 삶에서
  성장하기위해 시도했던 프로젝트 혹은 경험을
바탕으로
  여러분의
    역량과
    스킬,
    학습 및
    성장 경험,
    성취 과정
등을 아래 가이드 문서를 참고하여 자유롭게 표현해주세요. (분량: 최대 15장) {
  파일 제목 : 박정훈_포트폴리오 도메인_931116
}

memo {
  게임 엑셀 작성
  모든 아이디어 기록
  혼자 아이폰 게임 3달간 만들어봄
  미래에 도움이 될 것이라 생각되는 경우 새로운 것을 좋아함

  나는 세상을 바꿀것이다
}

애플 조아 {
  고등학생 때 처음 iPod을 봤다.
  이후 iPhone을 알게 되었고, 수능 끝나고 iPhone 4s를 처음 갖게 되었다.
  군대에 있는 동안 c, objective-C 등의 책을 사서 공부하고 macbook air 11인치 기본형을 구입하여 xCode로 프로그래밍을 시도함.
  책을 보며 분수 클레스를 만들어 봄
}

}

Life Journey {
Dot 1) 게임 세대
1998년, 제가 6살 때 집에 컴퓨터가 있었습니다.
컴퓨터에는 판매업자가 기본적으로 넣어주는 게임들이 있었습니다.
이 때가 제가 처음 게임을 접한 순간인 것 같습니다.

어렸을 때부터 게임을 접해 왔던 저는 으레 그렇듯 게임을 만드는 것에도 관심을 갖게 됩니다.
초등학생이 되어서는 학교에서 종이와 연필로 게임을 만들어 친구들과 놀기도 했습니다.
집에서는 컴퓨터로 스타 유즈맵을 만들기 위해 혼자 스크립트 코드를 테스트해가며 분석하기도 했습니다.

[dump]
특히 지금까지 유명한 ‘히어로즈 오브 마이트 앤 매직3’의 시각적 인상이 기억에 남습니다.
이후로도 인생 전반에 걸쳐 게임을 자연스럽게 플레이 해 왔습니다.


Dot 2) 수학과 결혼하다
유년기 시절 이미 수학에 재능이 있었다고 생각합니다.
게다가 운이 좋게도 2005년 초등학교 6학년 때 학원에서 훌륭한 수학 선생님을 만나게 되었습니다.
덕분에 바람직한 방식의 수학 교육을 받을 수 있었고, 치밀한 논리적 사고 능력을 키울 수 있었습니다.
시 규모 대회에 나가 2등을 받았을 때에는 저를 좋아해주던 중학교 수학 선생님께 진정한 인정을 받기도 했습니다.
저는 수학을 잘 할 수 있다는 확신을 가지게 됩니다.
평생 수학만 하며 살면 좋겠다는 생각을 하며, 대학도 수학과를 지원하여 입학하게 됩니다.

[수학에 재능]
7살에 어린이집에서 더하기를 했었는데, 이 때 더하기 문제가 잘 풀려서 정답을 맞추는 것을 좋아했던 것 같습니다.
[논리적 사고력]
특히 증명하는 방법을 배울 수 있어서 좋았습니다.
단순하게 보이는 문제라도, 주어진 조건을 활용하여 결과에 도달하기 까지의 모든 과정을 빠짐 없고 정교하게 증명하는 과정을 반복 경험했습니다.
이로 인해 문제를 마주할 때 꼼꼼하게 상황을 파악하고 해결 방법을 모색하는 능력을 얻은 것 같습니다.

[dump]
이 방식은 치밀하다는 장점이 있는 대신 시간이 오래 걸린다는 단점이 있습니다. 그래서 고등학교 3학년에 가서는 정규 과정의 진도를 따라잡지 못하고 수학 과목의 수능 성적은 3등급으로 마무리되었습니다.
하지만 인간 관계나 국어, 영어, 사회 등 인문 계열 과목은 잘 하지 못했습니다.
남들이 다 저를 인정하지 않아도 수학을 할 때 만큼은 제 스스로에 대한 확신을 얻을 수 있었습니다.
그리고 논리적 사고력은 곧 올바른 지식에 대한 욕심으로 이어진 것 같습니다.
세상에 당연한 것들은 아무것도 없으며 모두 다 의심을 해보게 됐습니다.
어떤 사실에 대해 스스로 납득할만큼 충분히 자연스러운 것이거나, 직접 증명하기 전에는 받아들이지 않았습니다.


Dot 3) 애플, 한 눈에 반하다
2011년, 고등학교 3학년 때 반에서 좀 사는 친구들이 하나 둘  iPod을 사용했습니다.
특히 iPod touch의 우아한 디자인과 매끄러운 동작을 보고 제 머리 속에 애플이 강하게 각인되었습니다.
수능 선물로 제 첫 애플 제품인 iPhone 4s를 부모님께 선물받은 후로 모든 핸드폰과 컴퓨터는 애플 제품만 써오고 있습니다.

안드로이드와 달리 안정적인 동작, 심플한 디자인이 좋았습니다.
제품의 내외부적으로 완벽한 제품을 만들고자 노력하는 애플의 고집이 좋았습니다.
후에 프로그램을 만든다면 애플 제품에서 동작하는 프로그램을 만들고 싶다는 생각을 하게 됐습니다.
제품을 잘 만드는 만큼 개발 환경도 다른 곳에 비해 집착을 가지고 세련되게 구축해 놓았을 것이라는 기대가 있었습니다.

[dump]
집착 광 장인 치밀 광적 세밀 주도 면밀 집착 


Dot 4) 끌어당김
2012년, 저는 수학을 좋아하여 수학과에 입학했습니다.
하지만 수능 전날에도 게임을 하다가 잘 정도로 게임을 좋아했던 저는, 수학에 전념하는 삶을 살 수 없는 모순을 품고 있었습니다.
대학생이 되자 저에게 자유가 주어졌습니다.
다양한 게임을 플레이한 저는 더 이상 만족할만한 게임을 찾을 수 없었습니다.
모든 면에서 감탄을 자아내는 훌륭한 게임이 나오기는 커녕, 한 영역에서라도 훌륭한 게임조차 찾기 힘들었습니다.
그래서 만족할 만한 게임을 스스로 만들어야겠다는 생각을 하게 되었습니다.

인터넷 검색을 통해 가장 기초적인 프로그래밍 언어가 C라는 것을 알게 되었습니다.
저는 우선 두꺼운 C 언어 책을 구입했습니다.
그리고 1학년을 마치고 "학업을 계속 할 수 있을까" 하는 고민을 갖고 우선 군대에 입대하게 됩니다.

[C 언어 책]
'C 프로그래밍 무작정 따라하기'
https://www.yes24.com/Product/Goods/2532710

[dump]
저는 대학교 1학년의 많은 시간을 게임으로 보내며 수학을 하는 미래보다 게임을 만드는 미래를 꿈꾸게 되었습니다.
저는 수학을 하는 미래를 그려보았습니다.
문제를 해결하는 과정은 존재하는 경우에 수를 하나하나 지워나가는 작업이라고 생각되었습니다.
그리고 그 결과 얻게되는 것은 세상에 직접적인 변화를 만드는 것이 아닌, 움직이지 않는 어떤 명제의 참, 거짓 여부일 것입니다.
저는 이 작업으로 나의 창조 욕구를 채우기에는 부족하다고 생각했습니다.
그리고 이 과정은 마치 창의성 없는 단순 노동의 반복으로 느껴졌습니다.


Dot 5) 프로그래밍 독학
2013년, 군대에 막 입대해서는 당연히 컴퓨터를 사용할 수 없었습니다.
그래서 C 책을 읽고 노트에 손코딩을 했습니다.
C 책을 다 읽은 후 컴퓨터에서 프로그램이 실행되는 구체적인 원리가 궁금해졌습니다.
그래서 컴퓨터의 동작 원리를 담고 있는 책(뇌를 자극하는 프로그래밍 원리 CPU부터 OS까지)을 구입하여 읽었습니다.
이 책은 게이트 소자에서 시작해서 OS에 달하는 내용을 간략하게 다루는 책이었습니다.
관련 지식이 전무하다시피 한 저에게 너무 딱 맞는 좋은 책이었습니다.

애플 제품에서 동작하는 프로그램을 만들기 위해서는 맥 운영체제에서 동작하는 XCode 프로그램이 필요했습니다.
그래서 저는 인생 첫 맥인 MacBook Air 11"를 구매했습니다.
그리고 Objective-C 책을 구입하여 군대 안에서 손코딩하며 독학했습니다.
휴가를 나갈 때마다 MacBook을 사용하면서 Mac 운영체제에 익숙해졌습니다.

[컴퓨터 책]
뇌를 자극하는 프로그래밍 원리 CPU부터 OS까지
https://m.yes24.com/Goods/Detail/2694763


Dot 6) trial and error
전역 후 대학 2학년을 끝으로 대학을 중퇴하게 됩니다.
이후에는 약 3년이라는 기간 동안 집에서 놀거나 독학하며 지냈습니다.
이 기간이 자세히 보면 굉장히 비효율적이고 버려지는 시간이라고 볼 수도 있습니다.
하지만 저는 이 기간동안 여러 경험도 하고 생각도 정리하며 내적 성장을 했다고 생각합니다.

이 기간동안 '나만의 게임 만들기'라는 목표를 제대로 진행하지 못했습니다.
"왜 나는 게임을 만들지 않는가"에 대한 질문을 스스로에게 많이 했습니다.
저는 이 질문에 대해 '환경' 이라는 답을 얻어냈습니다.
스스로 노력하는 것도 중요하지만, 나를 노력하게 만드는 환경에 찾아가는 노력도 중요하다는 사실을 마음 깊이 깨달았습니다.

[여러 경험]
유튜브, 게임, 방송

[dump]
가족들은 슬슬 취업을 하는게 좋지 않겠냐고 말했습니다.
저도 이 쯤 되서 환경의 중요성을 깨닳게 되었습니다.
하지만 결과물이 없었던 저는 몇 군대 이력서를 제출해도 연락이 오지 않았습니다.
저는 결과물이 없음연 만들면 된다고 생각했습니다.
전역 후 저는 독학하면서 저만의 프로그램을 만들고 싶었습니다.
하지만 부모님은 그럴거면 전과라도 해서 대학까지는 다니라고 하셨습니다.
하지만 저는 대학을 졸업할 자신이 없었습니다.
그래서 결국 2학년을 끝으로 대학을 중퇴하게 됩니다.
싼 값으로 결과물을 만들기 위해서는 안드로이드 어플을 만드는 것이 좋다고 생각했습니다.
한 달만에 간단한 한 페이지짜리 어플을 만들어 등록했습니다.
나만의 게임을 만들고 싶었다
독학하려고 했다
그러나 잘 되지 않았다
게임도 많이 했고 유튜브도 많이 보았다
자기개발 유튜브도 많이 보았다
왜 나는 독학하지 않는가 여러가지 시도를 해보았습니다
개인의 노력보다 환경이 중요함을 깨닳게 되었다
이 때 자기개발 유튜브 영상을 많이 보면서 내적으로 많은 성장을 했다고 생각합니다

[대학 졸업 자신]
인간관계, 원치 않는 학습


Dot 7) 최고의 기회
친척의 권유로 42 Seoul이라는 교육 과정을 알게 되었습니다.
2020년 12월부터 본과정을 진행하게 되었습니다.
과정에서 주어지는 초반 프로젝트들이 도전적인 주제여서 재밌게 진행할 수 있었습니다.
특히 그래픽 프로젝트가 매우 재미있었습니다.
군대에서 처음 프로그래밍을 공부할 때도 한셀의 VBA 로 셀을 색칠하여 도형을 그려볼 정도로 그래픽 구현에 관심이 많았습니다.
그래서 42 Seoul 에서 점을 찍는 기능만을 활용하여 입력된 여러 도형을 출력하는 프로그램을 작성하는 프로젝트를 가장 재밌게 했습니다.
그 당시 2달동안 주말까지 작업하며 하루 평균 10시간 프로젝트에 몰입했습니다.
스스로 "난 할 수 있다"는 생각만 하고 행동으로 보여준 적이 적었는데, 이 프로젝트를 통해 좋아하는 프로젝트에 몰입하는 경험을 할 수 있어서 좋았습니다.

그 외에도 컴퓨터의 기초를 스스로 학습하도록 유도하는 교육 시스템을 통해 많은 기초 지식을 쌓을 수 있었습니다.


Dot 8) Apple Developer Academy @ POSTECH

2023년, 취업을 준비하면서 아이폰 게임을 만드는 개인 프로젝트를 진행했습니다.
외형은 그럴듯하게 나왔지만 내부적으로 잘 알 수 없는 부분이 있었습니다.
메모리 누수, Scene 구성에 따른 object들 관리의 best practice 등 혼자서는 터득하기 어려운 부분이 있었습니다.
그러던 중 Apple Developer Academy를 발견하고, 제 꿈을 위해 여기에 다니면 좋겠다고 생각했습니다.

저는 만들고 싶은 프로그램이 많습니다.
최종적으로는 "커뮤니티를 형성할 수 있는 가상 세계"를 만들고 싶습니다.
저처럼 오랜 기간 집에 혼자 있던 사람도 끌어당겨 함께 나아갈 수 있도록 네트워크 형성을 도와주는 프로그램을 만들고 싶습니다.

그리고 함께 꿈을 위해 프로젝트에 올인할 수 있는 동료를 만날 수 있으면 좋겠습니다.

[dump]
2023년, 42 Seoul에서 실력을 쌓고난 후 아이폰에서 실행되는 게임을 만들 수 있겠다는 판단이 섰습니다.
가족이 취업을 제촉하여 일단 회사에서 일을 하고 있지만, 지금 하고 있는 일은 저의 꿈과 맞지 않다고 생각합니다.
앞으로 저의 꿈을 향해 짆
처음 봤다가 잊고 있었다. 혼자서 개발해보았으나 역시 혼자서는 환경이 안됐고, 환경을 만드는 법은 아직 없다. 여기에 가서 제대로 배울 수 있으면 좋겠다.

좋은 사람도 만나고, 좋은 환경에서 프로젝트를 해보고 싶습니다.

Life Journey를 작성하면서 잊고 있던 과거를 돌이켜 볼 수 있는 기회가 되었습니다. 아무도 궁금해하지 않는 제 인생사를 시간 내어 읽어주셔서 감사합니다.

[dump]
사람들을 더 유기적으로 연결시킬 수 있는 가상 세계를 만들고 싶다.

게임 좋아
Objective-C 및 머시기(이름 찾아라) 책
엑셀의 VBS를 사용하여 셀을 채워 선 및 정육면체를 그리기도
42 서울에서
3d 가상 세계를 만드는 것이 꿈

[dump]
}

포트폴리오 {
  성장 위해 시도한
    프로젝트
      혹은
    경험
  역량과 스킬,
  학습 및 성장 경험
  성취 과정
  등을 표현

  프로젝트 과정과 결과물, 작업물

  코드 기반 결과물
  프로젝트에 대한 설명
  코드가 담겨있는 GitHub 레포지토리
  학습 순서와 깊이가 담겨있는 개발 블로그
  코드를 공유 했던 발표 자료
  오픈소스에 기여했던 이력
  본인이 어떤 개발자인지를 보여줄 수 있는 것

0) template
목표 :
기간 :
인원 :
환경 :
언어 :
github repository :


1) GrowDungeon
목표 : 아이폰에서 실행되는 던전 타이쿤 만들기
기간 : 2018/11 ~ 2018/12
인원 : 1 인
환경 : XCode
언어 : Swift
github repository : https://github.com/Liemani/_deprecated_portfolio/tree/main/project/GrowDungeon
특징 : 미완성

저는 자유로운 게임이 좋습니다. 그래서 타이쿤 게임을 생각하던 중, 지하에 방과 길을 자유롭게 건설하는 게임이 있다면 재밌겠다는 생각을 했습니다.

그림, 음악, 효과음 등은 iPad와 GarageBand를 사용하여 직접 만들었습니다.

다양한 상수들을 Model/GameVariable.swift에 넣어 관리했습니다.

맵 밖의 경계를 넘어갈 경우 부드럽게 경계 안으로 화면을 이동시키고 싶었습니다. 검색을 통해 부드러운 효과를 위해 Bezier Curve 라는 것이 있다는 것을 알게 되었습니다. 이 함수를 적용하여 처음에는 빠르게 경계 안으로 들어오고 목표 지점에 가까워지면 서서히 느려지도록 하였습니다.

Controller/CameraController.swift:moveCameraIntoMovableRangeWithoutRestriction
```
    static func moveCameraIntoMovableRangeWithoutRestriction() {
      if Date().timeIntervalSinceReferenceDate < startTime + duration {
          let elapsedTime = Date().timeIntervalSinceReferenceDate - startTime

          let base = CGFloat(1 - elapsedTime / duration )
          let cube = pow(base, 3)
          let xPosition = destinationPoint.x - moveVector.dx * cube
          let yPosition = destinationPoint.y - moveVector.dy * cube
          TouchProcessor.camera.position = CGPoint(x: xPosition, y: yPosition)
      } else {
          TouchProcessor.camera.position = destinationPoint
          stopAnimating()
      }
  }
```


2) Haven and Hearth Assistant 앱 출시
목표 : 빠른 앱 출시 경험 확보
기간 : 2020/02/01 ~ 2020/03/14
인원 : 1 인
환경 : Android Studio
언어 : Kotlin
github repository : https://github.com/Liemani/_deprecated_portfolio/tree/main/project/HavenandHearthAssistant
앱 출시를 홍보한 링크 : https://www.havenandhearth.com/forum/viewtopic.php?f=49&t=67289
특징 : 지금은 앱을 관리해주지 않아 플레이 스토어에서 내려간 상태입니다.

이 앱을 만들 당시 내세울 것이 없어 지원서를 제출해도 연락이 오지 않는 상황이었습니다. 그래서 "나는 뭐든 할 수 있는 사람이다" 라는 것을 보여주기 위해 서비스를 빠르게 출시하는 것을 목표로 개인 프로젝트를 진행했습니다.

그러기 위해 제가 선택한 것은 안드로이드 어플 제작이었습니다. 아이폰 어플에 비해 낮은 완성도에도 등록이 가능하고 개발자 등록에도 적은 돈이 들어갔기 때문입니다.

종류는 평소 좋아하던 게임의 아이템 계산기를 만들기로 정했습니다. 제가 게임을 하면서 아이템 계산기가 있으면 좋겠다고 생각했기 때문에 적은 인원이지만 반드시 수요가 있을 것이라고 생각했습니다.

안드로이트 어플 개발은 처음이라 관련 영상을 보면서 기초적인 기능을 학습했습니다. 그리고 단일 페이지 어플을 만드는 부분까지 본 후, 이 정도면 원하는 어플을 만들 수 있겠다는 생각이 들었습니다.

단순하게 왼쪽에 재료, 오른쪽에 결과물, 하단에 광고가 들어가는 레이아웃의 한 페이지 어플을 만들기 시작했습니다.

언어도 처음 사용해보기 때문에 자바를 공부했습니다. 그런데 코틀린이라는 언어로 개발이 가능하다는데, 이 언어의 생김새가 수학 같이 생겨서 코틀린으로 만들기로 했습니다.

출시 후, 우크라이나인 유저가 계산이 제대로 되지 않는다는 피드백을 해주었습니다. 원인을 파악해보니 우크라이나 지역으로 설정할 경우 소수점이 '.' 이 아닌 ',' 로 표기되는 차이를 발견했습니다. 그래서 숫자값을 제대로 파싱하지 못해 계산되지 않는 문제를 수정하여 배포한 경험을 했습니다.


3) 42 Seoul : miniRT
목표 : 점을 찍는 함수를 사용하여 3D 그래픽 구현
기간 : 2021/04/04 ~ 2021/06/03
인원 : 1 인
환경 : Vim, Git
언어 : C
특징 : 42 Seoul 프로젝트라 github repository 공개는 힘듭니다.
상세 구현 :
- 삼각형, 사각형, 평면, 원, 구, 원기둥, 빛의 3D 이미지 생성
- 'c' 버튼을 누르면 미리 정의된 다음 카메라 위치로 이동
- 특정 파일을 읽고 명시된 작업 내용을 토대로 이미지를 출력하도록 구현
- 생성한 이미지를 bmp 형식으로 저장 하는 기능

저는 그래픽을 구현하는 프로그램을 꼭 만들어보고 싶었습니다. 군대에서 프로그래밍을 공부했을 때부터 그래픽에 관심이 있었습니다. 사무 컴퓨터에 설치된 한셀에서 VBA 스크립트를 이용하여 선과 직육면체를 그려보기도 했습니다. 평면의 화면이 사람 눈 하나의 망막에 맺힐 때 입체 이미지와 동일하게 보이기 위해 화면이 어떻게 그려져야 할 지 혼자 계산해보기도 했습니다.

이 프로젝트를 진행하면서 2 달간 주말도 작업하며 일 평균 10 시간 이상 작업할 정도로 제 인생에서 가장 열정적으로 작업한 기간이었습니다. 제가 직접 구현해보고 싶었기 때문에 그래픽을 구현하는 부분은 어떠한 참고자료도 보지 않고 고등학교 수학 지식으로 혼자 구현했습니다. 도형과 빛과 카메라의 위치에 따른 화면 출력을 제가 출력하고 싶은대로 계산하여 구현했습니다. 이후 이것을 레이 트레이싱이라고 부른다는 것을 알게 되었습니다.

앞으로도 그래픽에서는 도트 필터를 만들거나 매직 아이를 이용한 평면 3D를 구현하면 어떨까? 등 몇가지 해보고 싶은 흥미로운 것들이 있습니다.

Apple의 Metal에도 관심이 있어서 몇 번 예제를 진행해 보았으나 Metal의 컨셉을 이해하지 못해 아직 제대로 사용해보지는 못했습니다. 하지만 한 번, 두 번 반복하면서 Metal에 대한 이해가 깊어지고 있는 중입니다. Metal로 GPU를 활용하여 간단한 실시간 학습 AI를 구현할 수 있을까도 해보고 싶은 일입니다. Apple Vision Pro에서 동작하는 프로그램도 만들고 싶습니다.


4) Tiny Home
목표 : 앱스토어에 게임 출시
기간 : 2023/05/03 ~ 2023/07/23
인원 : 1 인
환경 : Xcode, Git, Vim, Numbers, Gimp
언어 : Swift
framework : SpriteKit, CoreData
github repository : https://github.com/Liemani/a-month-game
video link : https://www.youtube.com/watch?v=5rIfH8OFQHI
특징 : 미완성
상세 구현 :
- 생성형 오픈 월드 : 새로운 장소 이동 시 맵 생성
- 멀티 터치 구현 : 드래그 이동하면서 오브젝트와 터치 상호작용 가능
- 아이템 스케쥴러 : 타임 이벤트를 갖는 오브젝트(식물 성장, 아이템 분실)

지인이 취업을 도와준다면서 어플을 하나 만들어보라고 해서 진행하게 된 프로젝트입니다. 지인이 계획은 잡아주었지만 안드로이드 개발자라서 세부적인 도움을 받을 수는 없었습니다. 게임은 미완성으로, 출시하지 못했습니다.

기획, 이미지 제작, 코딩을 전부 혼자 했습니다. 제가 좋아하는 게임을 참고하여 모바일 버전으로 만들어 보았습니다. 가상 세계를 만드는 제 최종 꿈을 위한 중간 프로젝트 격의 게임입니다. 나중에는 3D로 확장하고 네트워크 기능도 넣고 타일 단위 제한도 없애야 합니다.

오브젝트 데이터 :
오브젝트의 데이터를 DB 에 저장하는 형식은 Minecraft 를 참고했습니다. 16x16 단위를 chunk 라고 이름붙였습니다. 맵을 로딩할 때는 chunk 단위로 로딩하도록 했습니다. 플레이 화면에는 3x3 chunk 가 로딩되도록 했습니다.

생성형 오픈 월드 :
생성형 오픈 월드를 구현하기 위해 자연스러운 문양을 생성하는 방법을 검색했습니다. noise map 이라는 기술을 사용하여 이를 구현할 수 있을 것 같았습니다. 저는 GameplayKit 에도 있는 가장 대중적인 perlin noise map 을 사용하였습니다.
- 관련 code link : https://github.com/Liemani/a-month-game/blob/main/a%20month%20game/ViewController/World/Global/MapGenerator.swift
원래 목표는 전체 맵에 거대한 noise map 을 하나 적용하고 16x16 chunk 단위를 region 이라고 칭해서 region 마다 각자의 noise map 을 갖도록 하려고 했습니다. 그런데 문제가 하나 있었습니다. 각 region 의 경계가 매끄럽지 않았습니다. region 의 경계가 부자연스럽게 생성될 수 있었습니다. 그래서 기존의 전체 맵에 대한 noise map 은 포기하고 region 의 경계는 바다가 되도록 했습니다. 각 region 은 섬이도록 하여 region 의 경계가 부자연스럽게 생성되는 것을 막았습니다.

오픈 월드 :
처음에는 맵이 { (x, y) | -inf < x < inf, -inf < y < inf } 좌표를 갖도록 했습니다. 하지만 이 방식은, double 타입이 약 16 자리의 유효 숫자를 갖기 때문에 숫자가 커지거나 작아질 경우 map 의 실제 위치와의 오차가 같이 커진다는 문제가 있을 것 같았습니다. 따라서 일정 범위를 벗어난 경우 다시 원점으로 돌아가는 방식으로 구현했습니다. 이 일정 범위의 기준은 중앙 chunk 로 잡았습니다. 캐릭터가 중앙 chunk 에서 벗어날 경우 캐릭터가 서게 되는 chunk 를 중앙 chunk 로 하여 맵을 다시 그리고, 그에 맞게 캐릭터의 위치를 이동 시켜, 캐릭터가 아무리 이동해도, 그려지는 맵의 위치가 항상 원점 근처이도록 했습니다.

Scene :
scene 은 초기 화면인 portal scene 과 게임 플레이 화면인 world scene 으로 나누었습니다. 장면 전환 시 필요한 데이터를 다음 장면으로 넘겨주도록 구현하고 싶었으나 reference 오류가 발생하여 잘 되지 않았습니다. 일단 전역 공간에서 필요에 맞는 object 를 생성하고 지우는 방식으로 구현했습니다. 장면 전환에 대한 best practice 를 알고 싶습니다.

architecture :
MVC 및 MVVM 등 아키텍쳐를 도입했습니다. 하지만 제가 잘 알지 못하고 "MVC 란 이런게 아닐까?" 라는 생각으로 적용한 것이라 이 또한 best practice 를 알고 싶습니다.

}
