format : https://github.com/Liemani/note_personal/blob/main/document_format_bootstrap.txt

article
{
  title
  {
    content
  }
}

list
{
  위 : high priority, 아래 : low priority

  collaboration_manager
  virtual_world
  information_manager
  sharable_resource_calculator
  history_viewer
  character_manager
  image_striper
  character_simulator
  gene_simulator
  sharable_order
  wiki_protocol
  sharable_name
  test
}

start :
대화 프로토콜 표준화
{
  ex> 부동산 필요한 정보 상세/요약 표준화
    -> 대화 효율 상승
  양식을 미리 준비하여 교환이 가능할 것이다.
}

collaboration_manager
{
  텍스트 파일 편집 협업 조율 도구
  이 프로그램을 통해 텍스트파일을 편집함
  예시
    노션
    freeform
  서버와 클라이언트가 존재해야 함
  윈도우와 맥 버전의 클라이언트 필요
  서버는 내 맘대로 맥으로 하자
  다수의 유저가 한 컴퓨터를 편집하는 것이 가능하다
  단 네트워크를 통해 접속한 사용자는 생성/편집/삭제를 할 때 모든 행동이 기록되어 git 마냥 이전 버전으로 되돌아갈 수 있어서 트래픽을 높이는 행위를 하는 것 이외의 데이터 변조의 위험은 걱정하지 않아도 된다.
  또한 창작마당처럼 원하는 언어를 보기 좋게 보여주는 기능을 마음대로 추가할 수 있다.
  예를 들어 C 같은 경우 하나의 파일을 기준으로 표시해주는 것이 아니라,
  함수를 기준으로 보여준다던가, 편집할 때 boiler plate 를 줄여주는 것은 기본이고,
  소스 코드 여기 저기로  jump 하는 편의 기능을 제공 등.
  내가 문서를 실수로 잘못 편집했을 때 다른 사람이 그 후 바로 편집 시, 내가 ‘command-z’ 를 하면 내가 편집한 내용이 되돌아간다
  다수의 유저가 한 서버에 접속하여 같은 파일을 수정하기 위해 같은 root 를 갖되 유저의 private 공간이 존재하고 public 공간이 존재해서
  public 공간의 자료를 탐험할 때도 private 에 정의된 자기만의 단축키를 사용하는 것이 가능한 시스템
}

virtual_world
{
  메타버스
  자랑질하는 곳이 아니다
  오순도순 모이는 것이 중요하다
  재미있어야 한다
  환경
    마인크래프트로 도서실 환경을 만든 후 아이패드에 띄워놓았다
    내 시각은 대부분의 시간 동안 컴퓨터 모니터를 향하고 있었기 때문에 큰 의미는 없었다
      그래서 환경을 조성하는 프로그램의 경우, 그 프로그램을 실행하는 기기의 화면 크기가 중요한 역할을 한다
        만약 메인 모니터에 환경 조성 프로그램을 실행한다면 큰 영향을 미칠 것이다
          작은 기기의 경우 환경을 조성하는 역할보다는 환경의 소품 하나의 역할을 맡는 것이 좋을 것 같다
            ex) 난로, 화분 등
  게다가 작업도 가능한
  유저가 지속 가능한 가상 세계
  유저끼리 데이터를 주고 받을 수 있음
  자동화 가능(자동화의 처리는 유저의 머신이 함)
  유저는 자신의 월드에서 예술 활동을 할 수 있고 이를 타인과 공유할 수 있다.
  generic world data를 추상화하고, 이에 다양한 플러그인을 통해 다양한 상호작용을 할 수 있다.
  데이터 연결
  샌드박스
  파일 작성 가능
  파일 시스템을 적극 활용할 것
  the difference between mac and window in aspect of file system
  각 월드의 호환성은 어떻게 해결할 것인가?
  월드간의 물자 연동에 시간 조건을 둔다.
}

sharable_order
{
  나만의 순위를 매기고 공유 및 팔로우 할 수 있는 서비스
    그게 그냥 social network 아닌가?
}

character_simulator
{
  다양한 성격을 가진 캐릭터를 생성하고 상호작용 시뮬레이터
}

gene_simulator
{
  다양한 형질을 부여하고 그에 따른 성장을 시뮬레이션
  형질을 물려받는 부모 자식 관계 구현
}

character_manager
{
  이야기의 주인공들 성격 관리를 도와주는 프로그램
}

image_striper
{
  이미지 상하좌우 여백 제거
  1. 이미지를 bmp fotmat으로 변환
  2. 여백 제거
  3. user가 선택한 format으로 이미지 저장
}

project manager
{
  jira의 project manager를 local로 구현
}

window position manager
{
  window에는 2가지 타입이 있다
  - 고정 : window 위치가 고정되어 다른 window에 밀리지 않는다
  - 이동 : window 위치가 동적이며, 다른 window에 의해 밀린다
  window::window(type = 이동);
  window::set(type);
  usage :
    중요한 window는 자주 확인할 수 있는 공간에 고정하여 사용한다
    마구 생성된 window는 가운데에 생성된 후, 새로운 window가 생성됨이 따라 밀려, 사이드로 이동한다
}

ppt maker
{
  대본을 입력하면 ai를 통해 ppt가 출력된다.
  이 때, 추가적으로 결과 ppt의 품질을 향상시키기 위해 사용자에게 일련의 질문을 한다.
  이 질문은 ai가 사용하기 쉽도록 ox 질문을 한다.
  혹은 경우에 따라 slider 질문을 할 수도 있다.
}

todo manager
{
  todo list
  todo
  - create date
  - start date
  - finish date
  feature
  - categorized visualization
}

눈에 띄는 todo list
{
  todo 리스트를 전자 문서로 만들어 놓아도 보기 힘들다.
  만약 apple vision를 사용한다면 앱 형태로 빼서 눈에 띄도록 걸어둘 수 있겠지만,
  그게 안되니 핸드폰이든 뭐든 todo list를 눈에 잘 띄고 편집이 쉽게 만들면 좋겠다.
  게다가 지저분해지면 안된다.
  그래서 시스템을 갖춰야한다.
  지저분해 질 것 같으면 장기 보관으로 넘어간다. 라거나.
  일단 적고 나서 분류를 도와주는 기능이라거나.
}

3d share program
{
  애플 비전 프로는 현실 세계에 가상의 기능을 사용할 수 있다는 장점이 있다.
  하지만 이것이 공유되지 않고 개인 기기에 머무를 수 밖에 없다는 것은 큰 단점이다.
  가상의 기능을 같이 공유할 수 있어야 비로소 메타버스의 완성인 것이다.
  이를 위해서는 3d 데이터를 정의해야 한다.
  아니면 최소한 공간 데이터와 2d 데이터와 앵커 포인트를 공유하면 된다.
}

목적관을 작성하고 공유하는 서비스
{
  가령 HTML -> 속성을 angle brackets로 묶어서 표현한다
  무엇을 하고 싶은 것인지 잘 모르겠다
}

문제 해결 공유 서비스
{
  다양 한 문제를 classify 하고
  문제들을 해결한 과정과 해결 방법을 공유하는 서비스
  "가령, 모니터 없는 pc의 ip 주소를 알아내는 방법" 이다
  어제 4 시간 동안 시도했으나 해결하지 못했다
  대안은 다음과 같다
  - 모니터를 구한다
  - 모니터가 없으면 윈도우 계정에 로그온이 불가능하다 hdmi 에뮬레이터를 구하여 모니터 없이도 윈도우에 로그인이 가능하도록 한다
    - gmail에 로그인하도록 세팅하여 gmail의 last access ip address를 얻는다
    - 파이썬 프로그램을 작성하여 스피커로 ip address를 출력하도록 한다
    - 파이썬 프로그램을 작성하여 연결된 ip address의 log 파일을 작성하도록 한다
  이런 해결 과정을 마치 git issue 처럼 조금씩 해결해 나가는 것을 주로 하는 서비스
  결국 문제를 최적화한다
}

global contact
{
  왜 전화를 할 때 자신을 소개해야 하지?
  정말 미련하고 멍청한 짓이다.
  모든 전화번호를 관리하는 서버가 있어야 하는게 당연한 것 아닌가?
  이게 지금 세기에 아직도 안된다고?
}

통일된 시각적 프로필 생성을 도와주는 서비스
{
  가령 보수적인가 진보적인가는 slider 로 표현할 수 있을 것이다
  이런 지표들을 구조화하고 쉽게 성향 파악 및 시각화 기능을 제공하는 서비스
  단순 재미가 아니라 구인구직에 프로필로 제공할 수 있는 수준
  이 플랫폼 안에 있는 사람들끼리는 긴 말이 필요가 없다
  딱 보고, "아 이런 사람이구나" 라는 것을 알 수 있다
}

sharable_resource_calculator
{
  하펜, 민더스트리, 오니 등 자원을 계산해야 하는 경우는 많다
  이런 자원을 계산해주는 프로그램을 쉽게 제작 및 배포할 수 있도록 도와주는 플랫폼 서비스
  마치 월드컵이나 티어표 제작 사이트처럼 말이다
  - 계산식 편집 가능
  - 계산식 데이터를 텍스트 문서로 입출력 가능
}

보업
{
  이름은 업보를 뒤집은 것이다
  세상의 업보를 관리하여 질서 확립에 이바지하는 서비스
  +가 아닌 -에 관한 것만을 다루는 것이 핵심이다
  [rule]
  서비스 이용자는 유저이다
  유저는 현실의 특정 대상을 평가할 수 있다
  유저는 다른 유저를 팔로우할 수 있다
  유저는 평가 대상을 평론하고 - 점수를 매길 수 있다
  평가 대상은 sigma[각 유저 -> 모든 유저](유저 팔로워 수(맞팔 제외) * 평가 점수) 만큼의 업보 가치를 얻는다
  업보 가치는 - 값이므로 낮을수록 큰 값이다
  유저는 평가 대상의 업보 가치에 따라 현실 선택에 영향을 받는다
  서비스 관리자는 평가 대상을 유저들이 찾기 쉽도록 잘 구조화할 의무가 있다
}

share talent
{
  가르칠 수 있는 것과 배우고 싶은 것을 공유하는 서비스
  서비스들의 링크를 manage하는 서비스
}

config
{
  다양한 설정이 가능하지만 기본 설정은 자주 바뀐다
}

information_manager
{
  뷰어 관점 이거 완전 diagram de facto
    시간
    structure diagram
    flow chart
    class diagram
    코드
  시간에 따른 현재값
    애플 제품 히스토리 아주 마음에 들더라
    하지만 더 상호작용이 많고 애니메이션이 들어가면 좋겠다
  예시
    역사
    과학사
    발전사
    개념 발달 과정
  데이터를 눈에 잘 보이게 표현하는 것이 중요한 것 같다.
    마인크래프트처럼 어떤 행위가 전부 기록으로 남는 거지
    깃도 내가 몇 개의 라인을 생성하고 수정했는지를 보면 재밌잖아?
    결국 내 행위가 수치적으로 눈에 보이냐가 중요한 것 같다

  개념들이 발생하는 것도 단순히 산발적인 개념의 뭉치가 아니라 탄생한 배경과 흐름이 존재한다.
  어떤 개념이 주된 개념으로 발생한 것인지, 아니면 기존 주된 개념의 곁가지로 탄생한 것인지를 구분하는 것을 아는 것은 그 개념들이 뒤섞인 상태를 해석할 때 우선순위를 부여할 때 사용될 수 있다.
  즉, 모든 경우의 수에 대한 결과를 이해하지 않아도 기초가 되는 블럭을 이해하는 것처럼, 개념의 발생 순서를 이해하는 것을 통해 복잡한 상태를 이해하는 응용력을 얻을 수 있는 것이다.
  따라서 개념들이 순서 없이 산발적으로 분포한 지금 상태를 정리하여 발생 순서를 정리하여 표현해주는 서비스가 있으면 좋겠다.
  이 때 새로운 개념 탄생의 수준을 구분하여 크기 별로 볼 수 있으면 좋겠다.
  마치 taxonomy처럼 역계문강목과속종과 같이 분류하여 역만 본다거나 계만 본다거나,, 그런데 내가 생각하는 것은 이것과 조금 다르다.
  가령 더하기가 나오고 곱하기가 나오고 제곱이 나오고 하는 큰 줄기의 개념 발생이 있을 것이고, 그 곁가지로 빼기, 나누기, 제곱근 등이 나올 수 있을 것이다. 이 때 큰 줄기만 보여주는 기능이 있는 것이다.
  wiki
  network
  개인의 역할이 중요하다
  중앙 분권
  서로 공유하며 논다
  가장 접근성 좋은 sharable_issue
  data는 text format을 사용하다 해도, 권한 관리는 프로그램이 해줘야 한다.
  개념을 모델화하고 각 명칭을 간략히 소개하고 각 명칭의 정의를 볼 수 있는 서비스
  - specification 을 구조화한 느낌?
}


sharable_protocol
{
  broker
  - 타 서비스의 de facto 커스텀 protocol 을 정의하고 공급하는 웹 서비스
    - 가령 당근은 태그 검색이 없어 맥북 램 16g 를 검색하기 힘들다
    - 이 검색을 가능하도록 title 및 content 를 사용한 protocol 을 정의한다
    - 이 기능은 정보의 회전률이 빠른 경우 backward-compatibility 를 포기할 수 있다는 장점이 있다
    - protocol 을 바꿀 경우 계도 기간을 정해야 한다
}

cpu 등의 성능을 시각적으로 표현하는 테스트
{
  가령 1 초동안 몇 개의 글자를 틀리지 않게 출력할 수 있는가?
      일반인이 이해하기 쉽게 컴퓨팅 파워를 시각화할 수 있다
}

텍스트 출력과 오디오 음성을 녹음하고 재생할 수 있는 포멧
{
  영상에 비해 적은 데이터만 있으면 되는 장점이 있다
    그냥 유튜브에 자막있는거잖아?
}

code explore
{
  코드를 탐색하는 간단한 기능조차 아직 제대로 구현되지 않다
}

sharable_name
{
  세상 모드 것에 이름을 붙여주는 단체
  이름을 붙여달라는 요청을 받으면 이름을 붙여주고 데이터 베티스에 등록한다
  등록된 이름과 내용은 쉽고 빠르게 검색이 가능하다
  
  name certification
  {
    어떤 개념, 문제, 이슈 등에 이름을 붙이고 이를 인증해주는 서비스
  }
}

인생 컨설팅 구독 서비스
{
  뭐든 물어보세요
  인간 gpt
  사회에서 보장해주지 않는 교육을 시켜줌
  자녀 교육 방법을 교육
  공부 방법을 교육
  도덕 교육
}

메타 언어
{
  여러 언어로 번역이 가능한 메타 언어
  하지만 여러 언어를 특정 언어로 번역하는 인공지능이 등장했다
}

test
{
  핸드폰 알림이 잘 작동하는지 테스트하는 용도의 서비스
}

의견을 받아서 format 을 기록하는 web service
{
  // 뭘 하고 싶은 건지 모르겠다.
  format 의 형태를 어떤 format 으로 기록할지를 의견을 받아서 적용한다
  따라서 어떤 format 을 사용할지를 변경하기가 쉬워야 한다
  가령 메모리, 프로세스, 프로그램, 이미지, 영상 등의 포멧을 기록할 때
  태그도 나눠서 마치 클래스의 자식 클래스를 만들듯이 구조화 해놓고
  어떤 태그에 대한 포멧을 바꾸면 그 자식들의 포멧이 그에 맞게 수정되는 식이다
}

interface implementation structure builder
{
  importance: +++++
  내가 볼 것과 외부에 공개할 것을 구분 짓어 작성하는 작업은 언제나 요구되는 크리티컬한 작업이다
  이를 위한 포멧과 편집기, 뷰어를 만드는 것은 생산성 향상을 위해 매우 중요하다
}

auto architecture
{
  importance: +++++
  대충 문장을 적어 넣으면 알아서 구조화해주는 프로그램
}

name certification
{
  어떤 개념, 문제, 이슈 등에 이름을 붙이고 이를 인증해주는 서비스
}

editor
{
  preprocessor director 에 따라 시각화 할 수도 있고 안할 수도 있다
  가령
```
#ifdef debug
    // code
#endif
```
  라는 코드가 있을 때
  editor 를 debug mode 로 이 파일을 연다면 이 코드를 보여주고, release mode 로 해당 파일을 연다면 이 코드를 안보여준다
  결과물과 sync 되는 코드를 보여주는 것

  마크업 랭귀지 아닌가?
}

환경
{
  마인크래프트로 도서실 환경을 만든 후 아이패드에 띄워놓았다
  내 시각은 대부분의 시간 동안 컴퓨터 모니터를 향하고 있었기 때문에 큰 의미는 없었다
  그래서 환경을 조성하는 프로그램의 경우, 그 프로그램을 실행하는 기기의 화면 크기가 중요한 역할을 한다
  만약 메인 모니터에 환경 조성 프로그램을 실행한다면 큰 영향을 미칠 것이다
  작은 기기의 경우 환경을 조성하는 역할보다는 환경의 소품 하나의 역할을 맡는 것이 좋을 것 같다
  ex) 난로, 화분 등
}

음성 파일을 통해 대본을 만드는 프로그램
{
  가령 A와 B가 대화를 하고 있다고 하자
  그럼 말소리를 통해 두 사람을 분간하여 아래와 같은 대본을 만들어주는 것이다
  겹치는 부분은 겹친다는 표시도 해줄 것
```
A: 어쩌고 저쩌고 말
B: 저쩌고 저쩌고 말
...
```
}

유저가 지속 가능한 가상 세계
{
  유저끼리 데이터를 주고 받을 수 있음
  자동화 가능(자동화의 처리는 유저의 머신이 함)
  유저는 자신의 월드에서 예술 활동을 할 수 있고 이를 타인과 공유할 수 있다.
  generic world data를 추상화하고, 이에 다양한 플러그인을 통해 다양한 상호작용을 할 수 있다.
  dynamic library의 life cycle을 조사할 필요가 있다.
}


custom_finder
{
  아이폰의 메인 화면의 폴더 방식 같이 폴더를 열면 확대되는 방식을 recursive하게 만들고,
  밑에 슬라이더를 둬서 최상단까지 쉽게 이동할 수 있는 탐색기
    이거 이미 finder 뷰 중 하나인데?
  슬라이더에는 각 directory들이 node로 표시되고 node에 슬라이더 버튼이 slimy하게 붙는다.
  아마 많은 데이터를 한 번에 표시하는 것이 불필요한 연산이라고 생각해서 간소화 시킨 것 같은데
  나는 사용자 편의성이 최우선이라고 생각한다.
}

팀 관리 솔루션 프로그램
{
  일정 관리(공유 달력, 일정 조율), 회의록 등
  이들을 모듈로 제공하여 확장성까지 챙겨버리기?
}

프로그램이 실행되면서 몇 번의 instruction을 사용했는지 출력하는 프로그램
{
  다양한 상태에서 instruction을 출력해 봄으로써 프로그램의 성능을 하드웨어 수준에서 통계적으로 수치화할 수 있을 것이다.
}

역사와 마찬가지로
{
  개념들이 발생하는 것도 단순히 산발적인 개념의 뭉치가 아니라 탄생한 배경과 흐름이 존재한다.
  어떤 개념이 주된 개념으로 발생한 것인지, 아니면 기존 주된 개념의 곁가지로 탄생한 것인지를 구분하는 것을 아는 것은 그 개념들이 뒤섞인 상태를 해석할 때 우선순위를 부여할 때 사용될 수 있다.
  즉, 모든 경우의 수에 대한 결과를 이해하지 않아도 기초가 되는 블럭을 이해하는 것처럼, 개념의 발생 순서를 이해하는 것을 통해 복잡한 상태를 이해하는 응용력을 얻을 수 있는 것이다.
  따라서 개념들이 순서 없이 산발적으로 분포한 지금 상태를 정리하여 발생 순서를 정리하여 표현해주는 서비스가 있으면 좋겠다.
  이 때 새로운 개념 탄생의 수준을 구분하여 크기 별로 볼 수 있으면 좋겠다.
  마치 taxonomy처럼 역계문강목과속종과 같이 분류하여 역만 본다거나 계만 본다거나,, 그런데 내가 생각하는 것은 이것과 조금 다르다.
  가령 더하기가 나오고 곱하기가 나오고 제곱이 나오고 하는 큰 줄기의 개념 발생이 있을 것이고, 그 곁가지로 빼기, 나누기, 제곱근 등이 나올 수 있을 것이다. 이 때 큰 줄기만 보여주는 기능이 있는 것이다.
}

토론 overflow
{
  각종 주제에 대해 토론하기 좋게 공간을 제공하는 서비스
  어떤 토론 주제에 대해 신규 유저가 모든 내용을 읽을 필요 없도록,
  발언자가, 훌륭한 정리글을 선정 및 채택하도록 한다.
  그러면 해당 토론 주제에 대해 그 정리글을 중심으로 계속해서 토론을 이어나갈 수 있다.
  그러면 다음으로는 1 차 선정된 사람이 그 정리글로부터 이어나간 토론을 잘 정리한 사람을 선정하는 식으로 이어나간다.
  새로운 시각의 주장은 칭찬한다.
  건전하고 발전적인 토론 문화의 가이드라인을 제시한다.
}

개념을 모델화하고 각 명칭을 간략히 소개하고 각 명칭의 정의를 볼 수 있는 서비스
{
  - specification 을 구조화한 느낌?
}

대화가 가능한 프로그램이 있으면 좋겠다.
{
  만약 대화가 가능한 프로그램을 만들었다면 다음으로 문제가 되는 것은 어떤 성격을 갖는가 일 것이다.
  성격은 대화를 주고 받으면서 형성될 것 같다
  2022-01-05
  이야기를 들어주는 프로그램이 있으면 좋겠다. 사람은 자신의 이야기를 하고 싶어 하고, 자기가 새롭게 한 생각을 다른 이에게 들려주는 것으로 능력을 발전시킬 수 있다고 생각한다
}

MMO editor
{
  다수의 유저가 한 컴퓨터를 편집하는 것이 가능하다
  단 네트워크를 통해 접속한 사용자는 생성/편집/삭제를 할 때 모든 행동이 기록되어 git 마냥 이전 버전으로 되돌아갈 수 있어서 트래픽을 높이는 행위를 하는 것 이외의 데이터 변조의 위험은 걱정하지 않아도 된다.
  또한 창작마당처럼 원하는 언어를 보기 좋게 보여주는 기능을 마음대로 추가할 수 있다.
  예를 들어 C 같은 경우 하나의 파일을 기준으로 표시해주는 것이 아니라,
  함수를 기준으로 보여준다던가, 편집할 때 boiler plate 를 줄여주는 것은 기본이고,
  소스 코드 여기 저기로  jump 하는 편의 기능을 제공 등.
  2021-06-01
  내가 문서를 실수로 잘못 편집했을 때 다른 사람이 그 후 바로 편집 시, 내가 ‘command-z’ 를 하면 내가 편집한 내용이 되돌아간다
  2021-05-18
# 다수의 유저가 한 서버
  다수의 유저가 한 서버에 접속하여 같은 파일을 수정하기 위해 같은 root 를 갖되 유저의 private 공간이 존재하고 public 공간이 존재해서
  public 공간의 자료를 탐험할 때도 private 에 정의된 자기만의 단축키를 사용하는 것이 가능한 시스템
}

설명 도구
{
  예시 freeform
  설명을 보조하는 다채로운 도구들!
  가볍고 빠르게 보기 좋은 차트를 실시간 생성, 수정하는 프로그램
  다양한 종류의 차트들
  - 왼쪽으로 흐르는 차트(cpu 사용량, 메모리 사용량 그래프처럼)
  - 표를 빠르게 만들고 채움
  - 막대 그래프
  - 비유를 뚜렷하게 표현하기 위한 다양한 이미지
  - 사람A B C 처럼, 마치 유튜브 설명 영상을 빠르게 제작 할 수 있는 제작 플랫폼과도 유사하다
  - 과계도와 flow chart 등을 빠르게 만들 수 있다

  설명하는 사람마다 테마를 설정해두고 스왑이 가능하다
  그러면 해당 설명자의 설정된 배경음이 재생된다
}

3d 묘사 프로그램
{
  머리 속의 3d 를 빠르게 표현하여 전달하고자 할 때 사용하는 프로그램

  특징:
  간단하고 투박하게 3d 공간을 편집할 수 있다
  - 빠른 reference 도형 추가 및 수정
  - 공간에 빠르게 부정형 물질 혹은 스케치 추가 가능

  오큘러스 리프트 등과 컨트롤러가 더해지면 훌륭할 것 같다

  아니 그런데 굳이 오큘러스 리프트로 볼 필요도 없네?
  컨트롤러 기능만 있어도 충분히 훌륭한데?
}

제품의 자원 순환을 시각화
{
  순환 가능한 자원과 순환 가능하지 않은 자원을 구분하고
  둘이 섞인 제품은 순환 가능하지 않은 제품이 된다.
  순환 가능하지 않은 제품은 판매가 금지된다.
}

단어 찾기
{
  몇 음절인지
  어떤 느낌인지
  어떤 글자가 들어갔는지 등을 통해
  필터링된 결과를 출력해준다
}

텍스트 에디터
{
  항상 가운데 줄을 highlight 한다
  i 등 insert mode 로 진입 시 가운데 줄을 편집하는 것을 기본으로 한다
}

문서편집기인데 모든 문자들이 저마다의 태그를 가지고 있고 특정 태그의 특정 문자나 단어를 replace 할 수 있는 프로그램
{
  글에 변수를 사용할 수 있음
  mac app
  vim이 좋은데
  vim이 이런게 되나?
  나만의 vim을 만들어야겠다.

  raw text 와 processed scene 을 동시에 보여주는 것이 바람직할 것 같다
  swift 의 playround 나 md editor 처럼
}

ai
{
  질문에 답을 할 수 있는 ai
  나만의 세계를 구축하고 어떤 상황에는 무엇을 할 지를 정리해 놓으면 그것을 바탕으로 어떤 질문에 대한 답을 계산할 수 있다
}

플로우차트 기반
{
  막 플로우 차트를 작성하는 거지
  만약 어떤 조건식이 성립하면 어떤것을 출력해라 등

  그리고 이 플로우 차트를 기반으로 지금 해야 할 일을 제시해주는 프로그램
}

필기 프로그램
{
  스케치북 앱처럼 자유롭게 필기를 하되
  오픈 월드보다는
  페이지가 존재하는 선형 구조가 좋겠다
  단, 페이지 이동이 자유로워야 한다
  그리고 의도치 않은 줌, 팬 등이 발생하지 않도록 신경썼으면 좋겠다.
}

채팅
{
  수신자로서 알람을 설정할 수도 있지만
  송신자로서도 알람을 설정할 수 있으면 좋겠다
}

text reader
{
  가운데 쯤을 highlight 하는 기능
	- 어디까지 읽었는지를 지속적으로 track 하는 용도
}

별점
{
  별점 프로그램에서 조금 더 나아가
  순서를 만드는 프로그램이 좋겠다
  간단하게는 드래그 엔 드롭 형식으로 순서를 변경 가능하도록 하자

  최소 점수와 최대 점수의 수치를 바꿀 수 있게 하는 것도 도움이 될까?

  가령 음식점 순위를 작성할 때
  맛, 분위기, 가격 등 여러 관점을 기준으로 순서를 나열할 수 있을 것이다.
  그러면 각 기준에 따른 순서를 각각 만들 수 있도록 하는 것이 맞을 것 같다.
  그렇게 생성한 데이터를 다양한 방식으로 보기 좋게 만들면 좋겠다.
}

compiler
{
  instance method 가 항상 첫 번째 인자로 instance 를 전달하는데
      나는 그렇지 않은 class 가 필요한 경우도 있었다
      method 의 집합을 정의하는 class 의 경우 그렇다

  여러 구조체를 상속받을 수 있는 구조체

  메모리와 CPU
  둘이 트레이드 오프 관계이기 때문에 필요한 만큼의 설정을 하면 그정도가 되도록 실행 파일을 생성하는 프로그램

  타겟의 스펙을 관리하기가 쉬워진다
}

역사 뷰어
쉽게 데이터를 구조화해주는 프로그램
impossible_no_response_system
사람 별점 서비스
세상의 모든 고등 지식들을 잘 정리해서 무료로 제공하는 서비스?
관습적 잔뿌리 같은 지식까지 총망라하여 아우르는 데이터 제공 서비스?
새로운 세계 정부 역할을 하는 시스템?
ar을 통해 기기와 인간의 상호작용을 강화하는 시스템?
시각적 프로그래밍 보조 프로그램
소외된 사람들에게 학문의 즐거움과 창조의 즐거움을 알릴 수 있으면 좋겠다.
내가 얻은 내용을 공유하면 좋을 것 같다.(플랫폼: 블로그, 유튜브)
42Seoul RPG 확장성(누구나 새로운 세계 창조하여 기존 데이터 이전 가능)
인터넷 페이지에 그림을 그리거나 주석을 남기고, 그렇게 생성된 새로운 페이지를 공유할 수 있는 서비스
어떤 찬반에 대해 전체 사람들이 투표할 수 있는 서비스
각종 공용 시설 시간 정보 쉽게 검색 서비스(농협 은행, 병원, 보건소 등)
각종 공용 시설 정보 쉽게 검색 서비스
어떤 찬반에 대해 전체 사람들이 투표할 수 있는 서비스
노래를 분석하여 어떤 악기가 어떤 음을 내고 있는지 리버싱하여 시각화 ai가 잘하겠다.
노아의 방주 근거가 확실한 나만의 노아의 방주를 만드는 것은 어떨까?
작성 후 다양한 포멧으로 내보내기가 가능하다
어떤 사양에서 얼마나 플레이어블한지를 시각화
apple note 처럼 txt 확장자 파일들을 편집하면 알아서 적절한 타이밍에 동기화 해주는 서비스
모델 편집기 마치 호그와투 지도처럼 시각적으로 표현도 가능할 것이다
자유 자재 유통망 - 현재 상태를 실시간으로 파악하여 도착 위치를 실시간으로 변경 가능
강의 수요 - 공급을 실시간으로 파악하는 서비스
실제 전기가 통하지 않는 키보드 모형 : ar 을 입혀서 키보드 입력을 받는다 -> 배터리가 필요 없는 키보드 탄생!
만물 구조화 : n 회독을 기본 convention 으로 하는 아름답게 구조화된 만물 모델
한 입력 장치로 여러 기기를 제어
