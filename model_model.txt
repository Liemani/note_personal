model_model.txt
format : https://github.com/Liemani/note_personal/blob/main/document_format_bootstrap.txt
모델화하는 것에 대한 다양한 이야기

개념 전달 구현 인터페이스 {

설명 순서 {
  배경(문제 의식, 필요성)
  가정(이렇게 하면 더 좋을 것이다.
  실제 예제
}

{
  도표 등 그림 이미지로 설명하기
}

}

model {

주제들  {
    주제 배열,
}

주제 {
    dump,
    todo,
    model,
}

}

개념 설명 방법 {

[2024-02-16]
귀납적 접근이 우선이다.
예시를 던지면서 컨셉을 바로 잡는다.
그런 후 규칙을 설명한다.
  [ex]
  js에서 ===는 좌항과 우항이 같은지 여부를 반환합니다.  // general explain(without detail(all part is very understandable at short time))
  1 === 1   // true
  1 === '1' // false
  단, 형변환 처리는 하지 않습니다.  // special case explain
이런 설명을 위해서는 테이블로 각 개념의 공통점과 차이점을 정리하고 시작하면 좋겠다.

[202?-??-??]
배경(문제 인식)(요구 발생)
의도(가설)(mandatory)
예시(사고 실험)(사용법)
구현(실험)(구현)

}

현상을 대변하는 model 만들기 {

모델링할 class 의 instance 데이터를 수집한다.
instances 를 분석하여 class 를 만든다.
이 때 모델은 확장성을 고려하여 설계하는 것이 좋다.
즉, instances 를 포괄하는 최적화된 모델을 만들기 위해 노력하되,
예상되는 확상성을 고려하여 확장성 있는 모델을 만들 수 있다.

기초 모델의 설계는 instances 를 구분 짓는 특정 상태 값을 property 로 갖게 한다.
즉, 식물의 하위 단계를 모델링 한다고 한다면,
씨를 맺는 식물과 씨를 맺지 않는 식물을 구분 짓는 상태 값을 property 로 갖게 한다.
모델은 표본을 구분 짓는 기준에 따라 여러 가지가 존재할 수 있다.
이 때 예측되는 표본에 대한 여러 모델의 가능성을 염두해 두고 그에 따라 적당한 확장성 모듈을 만들어서 필요에 따라 빠르게 특정 표본을 다룰 수 있는 확장된 모델로 전환 가능하도록 설계하는 것은 어떨까?

}

model 심층 분석 {

프로그래밍을 하는 것 같이 read / write 를 먼저 파악한다

빛은 어떻게 생성되고 어떻게 반응되는가?

생성: 태양, diode, 네온 싸인, 필라멘트, 번개, 반딧불이, 형광 물질, 연소
반응: 카메라 필름, 눈, 엽록소, 유리, 물

}

개념에 따른 어휘 {

- https://opentutorials.org/module/3747/22518
	- POSIX CLI1 - 3
create / delete: instance
read / write: property

}

모델링 과정 {

2022-01-26
2023-03-31
- 구체적인 자료 수집(동물 개체들 수집)
- 공통점을 추려내어 추상화(고양이 등)
    - 추상 객체의 목적을 명확히 한다
    - 구체 대상을 기반으로 추상 개념의 interface 작성(다리가 4개 등)
- interface를 통해 implementation 작성(크기에 따른 울음소리)
- instance 생성 및 활용(검은 색 고양이)

}

개념 간의 연결 {

부모, 자식, 태그
부모가 여러 개 일 수 있다
자식이 여러 개 일 수 있다
태그가 여러 개 일 수 있다
사실상 개념들은 거미줄처럼 연결될 수 있고(내용 설명에서 다른 개념으로 링크를 갖는 식으로) 그 외에 부모, 자식, 태그 등의 속성은 개념마다 있을 수도 있고 없을 수도 있는 것이다

}
